diff --git a/lib/python/Screens/VirtualKeyBoard.py b/lib/python/Screens/VirtualKeyBoard.py
--- a/lib/python/Screens/VirtualKeyBoard.py
+++ b/lib/python/Screens/VirtualKeyBoard.py
@@ -3,8 +3,9 @@
 
 from enigma import BT_SCALE, RT_HALIGN_CENTER, RT_HALIGN_LEFT, RT_HALIGN_RIGHT, RT_VALIGN_BOTTOM, RT_VALIGN_CENTER, RT_VALIGN_TOP, eListboxPythonMultiContent, getDesktop, getPrevAsciiCode, gFont
 
+from skin import findSkinScreen, fonts, loadSkin, parameters
-from skin import fonts, parameters
 from Components.ActionMap import HelpableNumberActionMap
+from Components.config import config
 from Components.Input import Input
 from Components.Label import Label
 from Components.Language import language
@@ -9,7 +9,7 @@
 from Components.Label import Label
 from Components.Language import language
 from Components.MenuList import MenuList
+from Components.MultiContent import MultiContentEntryPixmapAlphaTest, MultiContentEntryText
-from Components.MultiContent import MultiContentEntryPixmapAlphaBlend, MultiContentEntryText
 from Components.Sources.StaticText import StaticText
 from Screens.ChoiceBox import ChoiceBox
 from Screens.HelpMenu import HelpableScreen
@@ -52,43 +51,8 @@ def __init__(self):
 # For more information about using VirtualKeyBoard see /doc/VIRTUALKEYBOARD
 #
 class VirtualKeyBoard(Screen, HelpableScreen):
-	skin = """
-	<screen name="VirtualKeyBoard" title="Virtual KeyBoard" position="center,center" size="770,470" resolution="1280,720" zPosition="99">
-		<widget name="prompt" position="10,10" size="750,50" font="Regular;20" transparent="1" valign="center" />
-		<eLabel position="10,80" size="750,2" backgroundColor="#00555555" />
-		<eLabel position="10,124" size="750,2" backgroundColor="#00555555" />
-		<eLabel position="10,80" size="2,45" backgroundColor="#00555555" />
-		<eLabel position="759,80" size="2,45" backgroundColor="#00555555" />
-		<widget name="text" position="15,90" size="740,25" font="Regular;20" noWrap="1" transparent="1" valign="center" />
-		<widget name="list" position="10,140" size="630,225" selectionDisabled="1" transparent="1" />
-		<widget name="mode" position="700,140" size="60,25" font="Regular;20" halign="right" transparent="1" valign="center" />
-		<widget source="key_info" render="Label" position="e-100,225" size="90,40" backgroundColor="key_back" conditional="key_info" font="Regular;20" foregroundColor="key_text" halign="center" valign="center">
-			<convert type="ConditionalShowHide" />
-		</widget>
-		<widget source="key_text" render="Label" position="e-100,275" size="90,40" backgroundColor="key_back" conditional="key_text" font="Regular;20" foregroundColor="key_text" halign="center" valign="center">
-			<convert type="ConditionalShowHide" />
-		</widget>
-		<widget source="key_help" render="Label" position="e-100,325" size="90,40" backgroundColor="key_back" font="Regular;20" conditional="key_help" foregroundColor="key_text" halign="center" valign="center">
-			<convert type="ConditionalShowHide" />
-		</widget>
-		<widget name="locale" position="10,380" size="500,25" font="Regular;20" transparent="1" valign="center" />
-		<widget name="language" position="520,380" size="240,25" font="Regular;20" halign="right" transparent="1" valign="center" />
-		<widget source="key_red" render="Label" position="10,e-50" size="180,40" backgroundColor="key_red" font="Regular;20" foregroundColor="key_text" halign="center" valign="center">
-			<convert type="ConditionalShowHide" />
-		</widget>
-		<widget source="key_green" render="Label" position="200,e-50" size="180,40" backgroundColor="key_green" font="Regular;20" foregroundColor="key_text" halign="center" valign="center">
-			<convert type="ConditionalShowHide" />
-		</widget>
-		<widget source="key_yellow" render="Label" position="390,e-50" size="180,40" backgroundColor="key_yellow" conditional="key_yellow" font="Regular;20" foregroundColor="key_text" halign="center" valign="center">
-			<convert type="ConditionalShowHide" />
-		</widget>
-		<widget source="key_blue" render="Label" position="580,e-50" size="180,40" backgroundColor="key_blue" conditional="key_blue" font="Regular;20" foregroundColor="key_text" halign="center" valign="center">
-			<convert type="ConditionalShowHide" />
-		</widget>
-	</screen>"""
-
 	def __init__(self, session, title=_("Virtual KeyBoard Text:"), text="", maxSize=False, visible_width=False, type=Input.TEXT, currPos=None, allMarked=False, style=VKB_ENTER_ICON):
+		Screen.__init__(self, session)
-		Screen.__init__(self, session, mandatoryWidgets=["prompt", "text", "list"])
 		HelpableScreen.__init__(self)
 		self.setTitle(_("Virtual KeyBoard"))
 		prompt = title  # Title should only be used for screen titles!
@@ -69,41 +103,88 @@ def __init__(self, session, title=_("Virtual KeyBoard Text:"), text="", maxSize=
 			VKB_SAVE_TEXT: ("Save", _("Save")),
 			VKB_SEARCH_TEXT: ("Search", _("Search"))
 		}.get(style, ("Enter", u"ENTERICON"))
+		if findSkinScreen(["vkeyboard_hdskin", "vkeyboard_fhdskin"]) is None:
+			loadSkin("/usr/share/enigma2/VirtualKeyBoard_Icons/vkskin.xml")
+		if config.usage.virtualkeyBoard_style.value == "OV":
+			if getDesktop(0).size().height() == 720:
+				self.skinName = "vkeyboard_hdskin"
+				resolution = "HD"
+			else:
+				self.skinName = "vkeyboard_fhdskin"
+				resolution = "FHD"
+			self.bg = LoadPixmap("/usr/share/enigma2/VirtualKeyBoard_Icons/buttons%s/vkey_bg.png" % resolution)
+			self.bg_l = LoadPixmap("/usr/share/enigma2/VirtualKeyBoard_Icons/buttons%s/vkey_bg_l.png" % resolution)
+			self.bg_m = LoadPixmap("/usr/share/enigma2/VirtualKeyBoard_Icons/buttons%s/vkey_bg_m.png" % resolution)
+			self.bg_r = LoadPixmap("/usr/share/enigma2/VirtualKeyBoard_Icons/buttons%s/vkey_bg_r.png" % resolution)
+			self.sel_l = LoadPixmap("/usr/share/enigma2/VirtualKeyBoard_Icons/buttons%s/vkey_sel_l.png" % resolution)
+			self.sel_m = LoadPixmap("/usr/share/enigma2/VirtualKeyBoard_Icons/buttons%s/vkey_sel_m.png" % resolution)
+			self.sel_r = LoadPixmap("/usr/share/enigma2/VirtualKeyBoard_Icons/buttons%s/vkey_sel_r.png" % resolution)
+			key_red_l = LoadPixmap("/usr/share/enigma2/VirtualKeyBoard_Icons/buttons%s/vkey_red_l.png" % resolution)
+			key_red_m = LoadPixmap("/usr/share/enigma2/VirtualKeyBoard_Icons/buttons%s/vkey_red_m.png" % resolution)
+			key_red_r = LoadPixmap("/usr/share/enigma2/VirtualKeyBoard_Icons/buttons%s/vkey_red_r.png" % resolution)
+			key_green_l = LoadPixmap("/usr/share/enigma2/VirtualKeyBoard_Icons/buttons%s/vkey_green_l.png" % resolution)
+			key_green_m = LoadPixmap("/usr/share/enigma2/VirtualKeyBoard_Icons/buttons%s/vkey_green_m.png" % resolution)
+			key_green_r = LoadPixmap("/usr/share/enigma2/VirtualKeyBoard_Icons/buttons%s/vkey_green_r.png" % resolution)
+			key_yellow_l = LoadPixmap("/usr/share/enigma2/VirtualKeyBoard_Icons/buttons%s/vkey_yellow_l.png" % resolution)
+			key_yellow_m = LoadPixmap("/usr/share/enigma2/VirtualKeyBoard_Icons/buttons%s/vkey_yellow_m.png" % resolution)
+			key_yellow_r = LoadPixmap("/usr/share/enigma2/VirtualKeyBoard_Icons/buttons%s/vkey_yellow_r.png" % resolution)
+			key_blue_l = LoadPixmap("/usr/share/enigma2/VirtualKeyBoard_Icons/buttons%s/vkey_blue_l.png" % resolution)
+			key_blue_m = LoadPixmap("/usr/share/enigma2/VirtualKeyBoard_Icons/buttons%s/vkey_blue_m.png" % resolution)
+			key_blue_r = LoadPixmap("/usr/share/enigma2/VirtualKeyBoard_Icons/buttons%s/vkey_blue_r.png" % resolution)
+			key_backspace = LoadPixmap("/usr/share/enigma2/VirtualKeyBoard_Icons/buttons%s/vkey_backspace.png" % resolution)
+			key_clear = LoadPixmap("/usr/share/enigma2/VirtualKeyBoard_Icons/buttons%s/vkey_clear.png" % resolution)
+			key_delete = LoadPixmap("/usr/share/enigma2/VirtualKeyBoard_Icons/buttons%s/vkey_delete.png" % resolution)
+			key_enter = LoadPixmap("/usr/share/enigma2/VirtualKeyBoard_Icons/buttons%s/vkey_enter.png" % resolution)
+			key_exit = LoadPixmap("/usr/share/enigma2/VirtualKeyBoard_Icons/buttons%s/vkey_exit.png" % resolution)
+			key_first = LoadPixmap("/usr/share/enigma2/VirtualKeyBoard_Icons/buttons%s/vkey_first.png" % resolution)
+			key_last = LoadPixmap("/usr/share/enigma2/VirtualKeyBoard_Icons/buttons%s/vkey_last.png" % resolution)
+			key_left = LoadPixmap("/usr/share/enigma2/VirtualKeyBoard_Icons/buttons%s/vkey_left.png" % resolution)
+			key_locale = LoadPixmap("/usr/share/enigma2/VirtualKeyBoard_Icons/buttons%s/vkey_locale.png" % resolution)
+			key_right = LoadPixmap("/usr/share/enigma2/VirtualKeyBoard_Icons/buttons%s/vkey_right.png" % resolution)
+			key_shift = LoadPixmap("/usr/share/enigma2/VirtualKeyBoard_Icons/buttons%s/vkey_shift.png" % resolution)
+			key_shift0 = LoadPixmap("/usr/share/enigma2/VirtualKeyBoard_Icons/buttons%s/vkey_shift0.png" % resolution)
+			key_shift1 = LoadPixmap("/usr/share/enigma2/VirtualKeyBoard_Icons/buttons%s/vkey_shift1.png" % resolution)
+			key_shift2 = LoadPixmap("/usr/share/enigma2/VirtualKeyBoard_Icons/buttons%s/vkey_shift2.png" % resolution)
+			key_shift3 = LoadPixmap("/usr/share/enigma2/VirtualKeyBoard_Icons/buttons%s/vkey_shift3.png" % resolution)
+			key_space = LoadPixmap("/usr/share/enigma2/VirtualKeyBoard_Icons/buttons%s/vkey_space.png" % resolution)
+			key_space_alt = LoadPixmap("/usr/share/enigma2/VirtualKeyBoard_Icons/buttons%s/vkey_space_alt.png" % resolution)
+		else:
+			self.bg = LoadPixmap(path=resolveFilename(SCOPE_CURRENT_SKIN, "buttons/vkey_bg.png"))  # Legacy support only!
+			self.bg_l = LoadPixmap(path=resolveFilename(SCOPE_CURRENT_SKIN, "buttons/vkey_bg_l.png"))
+			self.bg_m = LoadPixmap(path=resolveFilename(SCOPE_CURRENT_SKIN, "buttons/vkey_bg_m.png"))
+			self.bg_r = LoadPixmap(path=resolveFilename(SCOPE_CURRENT_SKIN, "buttons/vkey_bg_r.png"))
+			self.sel_l = LoadPixmap(path=resolveFilename(SCOPE_CURRENT_SKIN, "buttons/vkey_sel_l.png"))
+			self.sel_m = LoadPixmap(path=resolveFilename(SCOPE_CURRENT_SKIN, "buttons/vkey_sel_m.png"))
+			self.sel_r = LoadPixmap(path=resolveFilename(SCOPE_CURRENT_SKIN, "buttons/vkey_sel_r.png"))
+			key_red_l = LoadPixmap(path=resolveFilename(SCOPE_CURRENT_SKIN, "buttons/vkey_red_l.png"))
+			key_red_m = LoadPixmap(path=resolveFilename(SCOPE_CURRENT_SKIN, "buttons/vkey_red_m.png"))
+			key_red_r = LoadPixmap(path=resolveFilename(SCOPE_CURRENT_SKIN, "buttons/vkey_red_r.png"))
+			key_green_l = LoadPixmap(path=resolveFilename(SCOPE_CURRENT_SKIN, "buttons/vkey_green_l.png"))
+			key_green_m = LoadPixmap(path=resolveFilename(SCOPE_CURRENT_SKIN, "buttons/vkey_green_m.png"))
+			key_green_r = LoadPixmap(path=resolveFilename(SCOPE_CURRENT_SKIN, "buttons/vkey_green_r.png"))
+			key_yellow_l = LoadPixmap(path=resolveFilename(SCOPE_CURRENT_SKIN, "buttons/vkey_yellow_l.png"))
+			key_yellow_m = LoadPixmap(path=resolveFilename(SCOPE_CURRENT_SKIN, "buttons/vkey_yellow_m.png"))
+			key_yellow_r = LoadPixmap(path=resolveFilename(SCOPE_CURRENT_SKIN, "buttons/vkey_yellow_r.png"))
+			key_blue_l = LoadPixmap(path=resolveFilename(SCOPE_CURRENT_SKIN, "buttons/vkey_blue_l.png"))
+			key_blue_m = LoadPixmap(path=resolveFilename(SCOPE_CURRENT_SKIN, "buttons/vkey_blue_m.png"))
+			key_blue_r = LoadPixmap(path=resolveFilename(SCOPE_CURRENT_SKIN, "buttons/vkey_blue_r.png"))
+			key_backspace = LoadPixmap(path=resolveFilename(SCOPE_CURRENT_SKIN, "buttons/vkey_backspace.png"))
+			key_clear = LoadPixmap(path=resolveFilename(SCOPE_CURRENT_SKIN, "buttons/vkey_clear.png"))
+			key_delete = LoadPixmap(path=resolveFilename(SCOPE_CURRENT_SKIN, "buttons/vkey_delete.png"))
+			key_enter = LoadPixmap(path=resolveFilename(SCOPE_CURRENT_SKIN, "buttons/vkey_enter.png"))
+			key_exit = LoadPixmap(path=resolveFilename(SCOPE_CURRENT_SKIN, "buttons/vkey_exit.png"))
+			key_first = LoadPixmap(path=resolveFilename(SCOPE_CURRENT_SKIN, "buttons/vkey_first.png"))
+			key_last = LoadPixmap(path=resolveFilename(SCOPE_CURRENT_SKIN, "buttons/vkey_last.png"))
+			key_left = LoadPixmap(path=resolveFilename(SCOPE_CURRENT_SKIN, "buttons/vkey_left.png"))
+			key_locale = LoadPixmap(path=resolveFilename(SCOPE_CURRENT_SKIN, "buttons/vkey_locale.png"))
+			key_right = LoadPixmap(path=resolveFilename(SCOPE_CURRENT_SKIN, "buttons/vkey_right.png"))
+			key_shift = LoadPixmap(path=resolveFilename(SCOPE_CURRENT_SKIN, "buttons/vkey_shift.png"))
+			key_shift0 = LoadPixmap(path=resolveFilename(SCOPE_CURRENT_SKIN, "buttons/vkey_shift0.png"))
+			key_shift1 = LoadPixmap(path=resolveFilename(SCOPE_CURRENT_SKIN, "buttons/vkey_shift1.png"))
+			key_shift2 = LoadPixmap(path=resolveFilename(SCOPE_CURRENT_SKIN, "buttons/vkey_shift2.png"))
+			key_shift3 = LoadPixmap(path=resolveFilename(SCOPE_CURRENT_SKIN, "buttons/vkey_shift3.png"))
+			key_space = LoadPixmap(path=resolveFilename(SCOPE_CURRENT_SKIN, "buttons/vkey_space.png"))
+			key_space_alt = LoadPixmap(path=resolveFilename(SCOPE_CURRENT_SKIN, "buttons/vkey_space_alt.png"))
-		self.bg_l = LoadPixmap(path=resolveFilename(SCOPE_CURRENT_SKIN, "buttons/vkey_bg_l.png"))
-		self.bg_m = LoadPixmap(path=resolveFilename(SCOPE_CURRENT_SKIN, "buttons/vkey_bg_m.png"))
-		self.bg_r = LoadPixmap(path=resolveFilename(SCOPE_CURRENT_SKIN, "buttons/vkey_bg_r.png"))
-		self.sel_l = LoadPixmap(path=resolveFilename(SCOPE_CURRENT_SKIN, "buttons/vkey_sel_l.png"))
-		self.sel_m = LoadPixmap(path=resolveFilename(SCOPE_CURRENT_SKIN, "buttons/vkey_sel_m.png"))
-		self.sel_r = LoadPixmap(path=resolveFilename(SCOPE_CURRENT_SKIN, "buttons/vkey_sel_r.png"))
-		key_red_l = LoadPixmap(path=resolveFilename(SCOPE_CURRENT_SKIN, "buttons/vkey_red_l.png"))
-		key_red_m = LoadPixmap(path=resolveFilename(SCOPE_CURRENT_SKIN, "buttons/vkey_red_m.png"))
-		key_red_r = LoadPixmap(path=resolveFilename(SCOPE_CURRENT_SKIN, "buttons/vkey_red_r.png"))
-		key_green_l = LoadPixmap(path=resolveFilename(SCOPE_CURRENT_SKIN, "buttons/vkey_green_l.png"))
-		key_green_m = LoadPixmap(path=resolveFilename(SCOPE_CURRENT_SKIN, "buttons/vkey_green_m.png"))
-		key_green_r = LoadPixmap(path=resolveFilename(SCOPE_CURRENT_SKIN, "buttons/vkey_green_r.png"))
-		key_yellow_l = LoadPixmap(path=resolveFilename(SCOPE_CURRENT_SKIN, "buttons/vkey_yellow_l.png"))
-		key_yellow_m = LoadPixmap(path=resolveFilename(SCOPE_CURRENT_SKIN, "buttons/vkey_yellow_m.png"))
-		key_yellow_r = LoadPixmap(path=resolveFilename(SCOPE_CURRENT_SKIN, "buttons/vkey_yellow_r.png"))
-		key_blue_l = LoadPixmap(path=resolveFilename(SCOPE_CURRENT_SKIN, "buttons/vkey_blue_l.png"))
-		key_blue_m = LoadPixmap(path=resolveFilename(SCOPE_CURRENT_SKIN, "buttons/vkey_blue_m.png"))
-		key_blue_r = LoadPixmap(path=resolveFilename(SCOPE_CURRENT_SKIN, "buttons/vkey_blue_r.png"))
-		key_backspace = LoadPixmap(path=resolveFilename(SCOPE_CURRENT_SKIN, "buttons/vkey_backspace.png"))
-		key_clear = LoadPixmap(path=resolveFilename(SCOPE_CURRENT_SKIN, "buttons/vkey_clear.png"))
-		key_delete = LoadPixmap(path=resolveFilename(SCOPE_CURRENT_SKIN, "buttons/vkey_delete.png"))
-		key_enter = LoadPixmap(path=resolveFilename(SCOPE_CURRENT_SKIN, "buttons/vkey_enter.png"))
-		key_exit = LoadPixmap(path=resolveFilename(SCOPE_CURRENT_SKIN, "buttons/vkey_exit.png"))
-		key_first = LoadPixmap(path=resolveFilename(SCOPE_CURRENT_SKIN, "buttons/vkey_first.png"))
-		key_last = LoadPixmap(path=resolveFilename(SCOPE_CURRENT_SKIN, "buttons/vkey_last.png"))
-		key_left = LoadPixmap(path=resolveFilename(SCOPE_CURRENT_SKIN, "buttons/vkey_left.png"))
-		key_locale = LoadPixmap(path=resolveFilename(SCOPE_CURRENT_SKIN, "buttons/vkey_locale.png"))
-		key_right = LoadPixmap(path=resolveFilename(SCOPE_CURRENT_SKIN, "buttons/vkey_right.png"))
-		key_shift = LoadPixmap(path=resolveFilename(SCOPE_CURRENT_SKIN, "buttons/vkey_shift.png"))
-		key_shift0 = LoadPixmap(path=resolveFilename(SCOPE_CURRENT_SKIN, "buttons/vkey_shift0.png"))
-		key_shift1 = LoadPixmap(path=resolveFilename(SCOPE_CURRENT_SKIN, "buttons/vkey_shift1.png"))
-		key_shift2 = LoadPixmap(path=resolveFilename(SCOPE_CURRENT_SKIN, "buttons/vkey_shift2.png"))
-		key_shift3 = LoadPixmap(path=resolveFilename(SCOPE_CURRENT_SKIN, "buttons/vkey_shift3.png"))
-		key_space = LoadPixmap(path=resolveFilename(SCOPE_CURRENT_SKIN, "buttons/vkey_space.png"))
-		key_space_alt = LoadPixmap(path=resolveFilename(SCOPE_CURRENT_SKIN, "buttons/vkey_space_alt.png"))
 		self.keyHighlights = {  # This is a table of cell highlight components (left, middle and right)
 			u"EXIT": (key_red_l, key_red_m, key_red_r),
 			u"EXITICON": (key_red_l, key_red_m, key_red_r),
@@ -960,26 +960,26 @@ def virtualKeyBoardEntryComponent(self, keys):
 					x += self.width * width
 				else:
 					w = self.bg_l.size().width()
+					res.append(MultiContentEntryPixmapAlphaTest(pos=(x, 0), size=(w, self.height), png=self.bg_l))
-					res.append(MultiContentEntryPixmapAlphaBlend(pos=(x, 0), size=(w, self.height), png=self.bg_l))
 					x += w
 					w = self.bg_m.size().width() + (self.width * (width - 1))
+					res.append(MultiContentEntryPixmapAlphaTest(pos=(x, 0), size=(w, self.height), png=self.bg_m, flags=BT_SCALE))
-					res.append(MultiContentEntryPixmapAlphaBlend(pos=(x, 0), size=(w, self.height), png=self.bg_m, flags=BT_SCALE))
 					x += w
 					w = self.bg_r.size().width()
+					res.append(MultiContentEntryPixmapAlphaTest(pos=(x, 0), size=(w, self.height), png=self.bg_r))
-					res.append(MultiContentEntryPixmapAlphaBlend(pos=(x, 0), size=(w, self.height), png=self.bg_r))
 					x += w
 				highlight = self.keyHighlights.get(key.upper(), (None, None, None))  # Check if the cell needs to be highlighted.
 				if highlight[0] is None or highlight[1] is None or highlight[2] is None:  # If available display the cell highlight.
 					xHighlight += self.width * width
 				else:
 					w = highlight[0].size().width()
+					res.append(MultiContentEntryPixmapAlphaTest(pos=(xHighlight, 0), size=(w, self.height), png=highlight[0]))
-					res.append(MultiContentEntryPixmapAlphaBlend(pos=(xHighlight, 0), size=(w, self.height), png=highlight[0]))
 					xHighlight += w
 					w = highlight[1].size().width() + (self.width * (width - 1))
+					res.append(MultiContentEntryPixmapAlphaTest(pos=(xHighlight, 0), size=(w, self.height), png=highlight[1], flags=BT_SCALE))
-					res.append(MultiContentEntryPixmapAlphaBlend(pos=(xHighlight, 0), size=(w, self.height), png=highlight[1], flags=BT_SCALE))
 					xHighlight += w
 					w = highlight[2].size().width()
+					res.append(MultiContentEntryPixmapAlphaTest(pos=(xHighlight, 0), size=(w, self.height), png=highlight[2]))
-					res.append(MultiContentEntryPixmapAlphaBlend(pos=(xHighlight, 0), size=(w, self.height), png=highlight[2]))
 					xHighlight += w
 				if self.alignment[0] == 1:  # Determine the cell alignment.
 					alignH = RT_HALIGN_LEFT
@@ -1016,7 +1016,7 @@ def virtualKeyBoardEntryComponent(self, keys):
 						top += (h - hImage) // 2
 					elif alignV == RT_VALIGN_BOTTOM:
 						top += h - hImage
+					res.append(MultiContentEntryPixmapAlphaTest(pos=(left, top), size=(wImage, hImage), png=image))
-					res.append(MultiContentEntryPixmapAlphaBlend(pos=(left, top), size=(wImage, hImage), png=image))
 					# print("[VirtualKeyBoard] DEBUG: Left=%d, Top=%d, Width=%d, Height=%d, Image Width=%d, Image Height=%d" % (left, top, w, h, wImage, hImage))
 				else:  # Display the cell text.
 					if len(key) > 1:  # NOTE: UTF8 / Unicode glyphs only count as one character here.
@@ -1037,13 +1037,13 @@ def markSelectedKey(self):
 		start, width = self.findStartAndWidth(self.selectedKey)
 		x = start * self.width
 		w = self.sel_l.size().width()
+		self.list[self.selectedKey // self.keyboardWidth].append(MultiContentEntryPixmapAlphaTest(pos=(x, 0), size=(w, self.height), png=self.sel_l))
-		self.list[self.selectedKey // self.keyboardWidth].append(MultiContentEntryPixmapAlphaBlend(pos=(x, 0), size=(w, self.height), png=self.sel_l))
 		x += w
 		w = self.sel_m.size().width() + (self.width * (width - 1))
+		self.list[self.selectedKey // self.keyboardWidth].append(MultiContentEntryPixmapAlphaTest(pos=(x, 0), size=(w, self.height), png=self.sel_m, flags=BT_SCALE))
-		self.list[self.selectedKey // self.keyboardWidth].append(MultiContentEntryPixmapAlphaBlend(pos=(x, 0), size=(w, self.height), png=self.sel_m, flags=BT_SCALE))
 		x += w
 		w = self.sel_r.size().width()
+		self.list[self.selectedKey // self.keyboardWidth].append(MultiContentEntryPixmapAlphaTest(pos=(x, 0), size=(w, self.height), png=self.sel_r))
-		self.list[self.selectedKey // self.keyboardWidth].append(MultiContentEntryPixmapAlphaBlend(pos=(x, 0), size=(w, self.height), png=self.sel_r))
 		self.previousSelectedKey = self.selectedKey
 		self["list"].setList(self.list)
 
